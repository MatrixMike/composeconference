{
  "speakers": [
    {
      "name": "Julie Moronuki",
      "img": "/assets/img/2018-melbourne/julie_moronuki.jpg",
      "title": "Keynote - The Unreasonable Effectiveness of Metaphor",
      "abstract":
        "Metaphor is a figure of speech that describes one thing in terms of another, ignoring literal differences in favor of some similarity the author wants readers to notice. Most people come away from their English or literature courses with the impression that this is all metaphor is, a poetic device that might be pretty but is always unnecessary and may even obscure the real world or obstruct technical discussions.  <p/> This isn't how linguists and cognitive scientists think of metaphor, however. Decades of research into the nature of metaphor suggests that conceptual metaphors are pervasive, and much of our reasoning power and ability to build and understand abstractions is based on metaphor. Some of these conceptual metaphors, such as understanding and talking about time, by relating it to properties of physical space, are \"dead\" to us; that is, we no longer feel that they are metaphors, but it's difficult to think of \"time\" without those metaphors. Some, such as \"time is money\", are more obviously metaphorical but influence our unconscious understanding of time and what we think about it.  <p/> We'll examine the necessity of conceptual metaphors and what makes metaphors good or bad, in what they conceal or reveal about things and their relationships. We'll look at the ways mathematics relies on metaphor, and the metaphorical nature of how we think about computers, programs, interfaces -- and, yes, monads. Finally, with an eye toward better pedagogy and building better interfaces, we'll see how finding new metaphors can help us see new truths about the world by revealing facets of abstractions that other metaphors have concealed.",
      "bio":
        "<p>Julie Moronuki learned Haskell while writing Haskell Programming from First Principles. She has degrees in philosophy and linguistics and formerly worked as a language teacher and librarian. Her interests include the intersections of linguistics, logic, and programming, as well as improving functional programming instruction and outreach. Currently she is writing a second book, The Joy of Haskell, and is a co-founder of Type Classes (typeclasses.com). In her spare time she homeschools her two children and makes too much jam.</p>",
      "start_time": null,
      "end_time": null,
      "home": "https://argumatronic.com",
      "github": "argumatronic",
      "twitter": "argumatronic"
    },
    {
      "name": "Dr. Paul Bone",
      "img": "/assets/img/2018-melbourne/paul_bone.jpeg",
      "title": "AST to WebAssembly: writing a code generator",
      "abstract":
        "Ever wonder how your compiler translates your program into machine code but worried that this was some eldritch knowledge, lurking in the depths of compilers where undergraduates fear to tread?  Well it's not, and although it's a deep topic, the basics are fairly basic. <p/> The WebAssembly MVP is now available in almost all browsers (except IE) providing a fast virtual machine right in your browser.  Opening up the web for strong & statically typed functional programming languages*.  This presentation will show a simple and elegant code generator that generates WebAssembly from an abstract syntax tree (AST) for a ML-like language. Furthermore the basic algorithm is so straightforward you'll be filing PRs against your favourite compiler next week!* <p/> *: Almost:  The WebAssembly MVP leaves a couple of really awesome features unimplemented, but it won't be long and these problems will be solved too.  We just want to make sure you're ready. <p/> The presentation will also discuss other architectures including x86_64 and LLVM.",
      "bio":
        "Dr Paul Bone is a talented software engineer and computer scientist. His interests include programming language implementation and performance, including parallelism and concurrency. <p/> By day Paul works for Mozilla where he is a humble garbage collector, sweeping up unused objects from Firefox's JavaScript heap. Err.. Senior Software Engineer, Paul works on the garbage collector for Firefox's JavaScript engine. <p/> At night Paul transforms into his alter-ego and works on the new Plasma programming language, which aims to bring the worlds of functional and imperative programming together! With the powers of these worlds unified we will usher in a new age of large scale, reliable, high-performance parallel and concurrent software.",
      "start_time": null,
      "end_time": null,
      "home": "http://paul.bone.id.au/",
      "github": "PaulBone",
      "twitter": "Paul_Bone"
    },
    {
      "name": "Dave Yarwood",
      "img": "/assets/img/2018-melbourne/dave_yarwood.jpeg",
      "title": null,
      "abstract": null,
      "start_time": null,
      "end_time": null,
      "home": null,
      "github": null,
      "twitter": null,
      "bio": null
    },
    {
      "name": "George Wilson",
      "img": "/assets/img/2018-melbourne/george_wilson.jpg",
      "title": null,
      "abstract": null,
      "start_time": null,
      "end_time": null,
      "home": "http://wils.online/",
      "github": "https://github.com/gwils",
      "twitter": "GeorgeTalksCode",
      "bio":
        "George Wilson is an enthusiastic functional programmer from Brisbane, Australia. He works on open source Haskell projects at the Queensland Functional Programming Lab inside Data61. George is a member of the Haskell.org committee, and a Hackage Trustee."
    },
    {
      "name": "Rohit Grover",
      "img": "/assets/img/2018-melbourne/rohit_grover.jpg",
      "title": null,
      "abstract": null,
      "start_time": null,
      "end_time": null,
      "home": null,
      "github": null,
      "twitter": null,
      "bio": null
    },
    {
      "name": "Tim McGilchrist",
      "img": null,
      "title": null,
      "abstract": null,
      "start_time": null,
      "end_time": null,
      "home": null,
      "github": null,
      "twitter": null,
      "bio": null
    }
  ],
  "yet_to_accept": [
    {
      "name": "Andrew McCluskey",
      "img": null,
      "title": null,
      "abstract": null,
      "start_time": null,
      "end_time": null,
      "home": null,
      "github": null,
      "twitter": null,
      "bio": null
    },
    {
      "name": "David Barri",
      "img": null,
      "title": "Quantifiers in Programming, with real examples",
      "abstract": null,
      "start_time": null,
      "end_time": null,
      "home": null,
      "github": null,
      "twitter": null,
      "bio": null
    }
  ]
}
